@page "/score-card"
@using BlazorBowling.Services
@inject DataRazor myData

<PageTitle>Bowling Score Card</PageTitle>

<h1>Bowling Score Card for @myData.PlayerName</h1>

<p role="status">Total Score: @totalScore</p>
<p>You rolled a @lastRoll</p>

<button @onclick="ToggleManualInput">
    @(manualInputMode ? "Exit Manual Mode" : "Enter Manual Mode")
</button>

@if (manualInputMode)
{
    <input type="number" min="0" max="10" @bind="manualPins" />
    <button @onclick="() => Roll(manualPins)">Submit Roll</button>
}
else
{
    <button @onclick="() => Roll()">Roll it!</button>
}

<button class="btn btn-secondary" @onclick="ResetGame">New Game!</button>
<button class="btn btn-secondary" @onclick="SaveScore">Save Score</button>

@if (showStrikeAnimation)
{
    <div class="strike-ball" role="img" aria-label="Bowling ball rolling"></div>
}

<table class="table table-bordered text-center"> 
    <thead>
    <tr> <!-- Frame numbers -->
        @for (int i = 0; i < maxFrames; i++)
        {
            <th>Frame @(@i + 1)</th>
        }
    </tr>
    </thead>
    <tbody>
    <tr> <!-- Roll 1 -->
        @for (int i = 0; i < maxFrames; i++)
        {
            var r1 = rolls[0,i];
            <td>@(r1 == 10 ? "X" : r1.HasValue ? r1.ToString() : "-")</td>
        }
    </tr>
    <tr> <!-- Roll 2 -->
        @for (int i = 0; i < maxFrames; i++)
        {
            var r1 = rolls[0,i];
            var r2 = rolls[1,i];
            <td>@(r1 == 10 ? "" : r2.HasValue ? r2.ToString() : "-")</td>
        }
    </tr>
    <tr> <!-- Frame Total -->
        @for (int i = 0; i < maxFrames; i++)
        {
            var displayTotal = GetDisplayedFrameTotal(i);
            <td style="color:@(displayTotal.HasValue && displayTotal.Value == 10 ? "blue" : "black")">
                @(displayTotal.HasValue ? displayTotal.Value.ToString() : "-")
            </td>
        }
    </tr>
    </tbody>
</table>



@code {
    private int?[,] rolls = new int?[2, 12];
    public int[] frameTotals = new int[12];
    private int maxFrames = 10;
    private int totalScore = 0;
    public int currentFrame = 0;
    public int currentRoll = 10;
    private int lastRoll = 10; 
    private bool showStrikeAnimation = false;
    private bool manualInputMode = false;
    private int manualPins = 0;

    
    private Random rnd = new Random();
    
    private void ToggleManualInput()
    {
        manualInputMode = !manualInputMode;
        manualPins = 0;
    }


    private void SaveScore()
    {
        myData.SavedGames.Add(new SavedGame
        {
            PlayerName = string.IsNullOrWhiteSpace(myData.PlayerName) ? "Player" : myData.PlayerName,
            Score = totalScore,
            Timestamp = DateTime.Now
        });
    }

    private async Task Roll(int? forcedPins = null)
    {
        if (currentFrame >= maxFrames) return; 

        int pinsLeft = 10;
        int firstRoll = rolls[0,currentFrame] ?? 0;

        if (currentRoll == 1)
            pinsLeft -= firstRoll;

        // use manual/auto pins if provided, otherwise random
        lastRoll = forcedPins ?? rnd.Next(0, pinsLeft + 1);

        rolls[currentRoll, currentFrame] = lastRoll;

        // STRIKE
        if (currentRoll == 0 && lastRoll == 10)
        {
            rolls[1, currentFrame] = null; 
            frameTotals[currentFrame] = 10;

            if (currentFrame == 9 && maxFrames == 10)
                maxFrames = 11;
            else if (currentFrame == 10 && maxFrames == 11)
                maxFrames = 12;

            currentFrame++;
            currentRoll = 0;  
            await TriggerStrikeAnimation();
        }
        else if (currentRoll == 1)
        {
            frameTotals[currentFrame] = (rolls[0,currentFrame] ?? 0) + (rolls[1,currentFrame] ?? 0);
            currentFrame++;
            currentRoll = 0;
        }
        else
        {
            if (currentFrame == 11 && maxFrames == 12)
            {
                frameTotals[currentFrame] = (rolls[0,currentFrame] ?? 0);
                currentFrame++;
                currentRoll = 0;
            }
            else
            {
                currentRoll = 1;
            }
        }

        totalScore = frameTotals.Sum();
    }


    private int? GetDisplayedFrameTotal(int i)
    {
        // Regular frames 1–9: show stored frame total when > 0
        if (i < 9)
        {
            var ft = frameTotals[i];
            return ft > 0 ? ft : (int?)null;
        }

        // Helper local function to compute the 10th frame's displayed total including bonuses
        int? ComputeTenthWithBonuses()
        {
            var baseTotal = frameTotals[9]; // usually 10 when strike or sum of two rolls when not
            if (baseTotal <= 0) return null;

            if (maxFrames == 10)
            {
                return baseTotal;
            }

            int bonus1 = 0;
            int bonus2 = 0;

            var r11_1 = rolls[0,10];
            var r11_2 = rolls[1,10];
            var r12_1 = rolls[0,11];

            if (r11_1.HasValue)
            {
                if (r11_1.Value == 10)
                {
                    // strike as first bonus; second bonus is the first roll of frame 12 (if any)
                    bonus1 = 10;
                    if (r12_1.HasValue) bonus2 = r12_1.Value;
                }
                else
                {
                    bonus1 = r11_1.Value;
                    if (r11_2.HasValue) bonus2 = r11_2.Value;
                }
            }
            var total = baseTotal + bonus1 + bonus2;
            return total > 0 ? total : (int?)null;
        }

        // i == 9 (10th frame column): always show the computed 10th frame total
        if (i == 9)
        {
            return ComputeTenthWithBonuses();
        }

        // Bonus frames (i > 9): only show the computed total in the last visible column
        if (i > 9)
        {
            return i == (maxFrames - 1) ? ComputeTenthWithBonuses() : (int?)null;
        }

        return null;
    }

    private async Task TriggerStrikeAnimation()
    {
        showStrikeAnimation = true;
        StateHasChanged();
        try
        {
            await Task.Delay(2200);
        }
        finally
        {
            showStrikeAnimation = false;
            StateHasChanged();
        }
    }

    private void ResetGame()
    {
        rolls = new int?[2, 12];
        frameTotals = new int[12];
        maxFrames = 10;
        currentFrame = 0;
        currentRoll = 0;
        totalScore = 0;
        lastRoll = 0;
        showStrikeAnimation = false;
        
        // Bugfix: When first visiting the scorecard, or return to it, you have to click new-game to get it scoring.
    }
}