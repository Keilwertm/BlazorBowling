@page "/Score-Card"
@using BlazorBowling.Services
@inject DataRazor myData

<PageTitle>Bowling Score Card</PageTitle>

<h1>Bowling Score Card for @myData.PlayerName</h1>

<p role="status">Total Score: @totalScore</p>

<p>You rolled a @lastRoll</p>

<button class="btn btn-primary" @onclick="Roll">Roll It!</button>

<button class="btn btn-secondary" @onclick="ResetGame">New Game!</button>

@if (showStrikeAnimation)
{
    <div class="strike-ball" role="img" aria-label="Bowling ball rolling"></div>
}

<table class="table table-bordered text-center"> 
<thead>
<tr> <!-- Roll 1 -->
    @for (int i = 0; i < 10; i++)
    {
        var r1 = rolls[0,i];
        <td>@(r1 == 10 ? "X" : r1.HasValue ? r1.ToString() : "-")</td>
    }
</tr>
<tr> <!-- Roll 2 -->
    @for (int i = 0; i < 10; i++)
    {
        var r1 = rolls[0,i];
        var r2 = rolls[1,i];
        <td>@(r1 == 10 ? "" : r2.HasValue ? r2.ToString() : "-")</td>
    }
</tr>
<tr> <!-- Frame Total -->
    @for (int i = 0; i < 10; i++)
    {
        var ft = frameTotals[i];
        <td style="color:@(ft == 10 ? "blue" : "black")">
            @(ft > 0 ? ft.ToString() : "-")
        </td>
    }
</tr>
</thead>
</table>

<p>Total Score: @totalScore</p>
<button class="btn btn-primary" @onclick="Roll">Roll It!</button>


@code {
    private int?[,] rolls = new int?[2, 10];
    public int[] frameTotals = new int[10];
    private int totalScore = 0;
    public int currentFrame = 0;
    public int currentRoll = 0;
    private int lastRoll = 0; 
    private bool showStrikeAnimation = false;
    
    private Random rnd = new Random();

    private async Task Roll()
    {
        if (currentFrame >= 10) return; // no rolls after frame 10
        if (showStrikeAnimation) return; // ignore clicks while strike animation is running

        int pinsLeft = 10;
        int firstRoll = rolls[0,currentFrame] ?? 0;

        if (currentRoll == 1)
            pinsLeft -= firstRoll;

        lastRoll = rnd.Next(0, pinsLeft + 1);
        rolls[currentRoll, currentFrame] = lastRoll;

        // STRIKE
        if (currentRoll == 0 && lastRoll == 10)
        {
            rolls[1, currentFrame] = null; // leave blank instead of 0
            frameTotals[currentFrame] = 10;
            currentFrame++;   // jump straight to next frame
            currentRoll = 0;  // reset to first roll
            await TriggerStrikeAnimation();
        }
        // SECOND ROLL
        else if (currentRoll == 1)
        {
            frameTotals[currentFrame] = (rolls[0,currentFrame] ?? 0) + (rolls[1,currentFrame] ?? 0);
            currentFrame++;
            currentRoll = 0;
        }
        // FIRST ROLL BUT NOT STRIKE
        else
        {
            currentRoll = 1;
        }

        // Update total
        totalScore = frameTotals.Sum();
    }


    private async Task TriggerStrikeAnimation()
    {
        // If already animating, restart the timer
        showStrikeAnimation = true;
        StateHasChanged();
        try
        {
            await Task.Delay(2200);
        }
        finally
        {
            showStrikeAnimation = false;
            StateHasChanged();
        }
    }

    private void ResetGame()
    {
        rolls = new int?[2, 10];
        frameTotals = new int[10];
        currentFrame = 0;
        currentRoll = 0;
        totalScore = 0;
        lastRoll = 0;
        showStrikeAnimation = false;
    }
    
    // bug fix: after getting a strike you have to click 2-3 times to advance 
}

