@page "/score-card"
@using BlazorBowling.Services
@inject DataRazor myData

<PageTitle>Bowling Score Card</PageTitle>

<h1>Bowling Score Card for @myData.PlayerName</h1>

<p role="status">Total Score: @totalScore</p>
<p>You rolled a @lastRoll</p>

<button @onclick="ToggleManualInput">
    @(manualInputMode ? "Exit Manual Mode" : "Enter Manual Mode")
</button>

@if (manualInputMode)
{
    <InputNumber @bind-Value="manualPins"
                 min="0" max="10" step="1"
                 inputmode="numeric" pattern="\d*"
                 oninput="this.value=this.value.replace(/[^0-9]/g,'');"
                 class="form-control form-control-sm w-auto d-inline-block me-2" />
    <button class="btn btn-primary btn-sm d-inline-block"
            @onclick="() => Roll(manualPins)"
            disabled="@(manualPins < 0 || manualPins > 10)">
        Submit Roll
    </button>
}
else
{
    <button @onclick="() => Roll()">Roll it!</button>
}

<table class="table table-bordered text-center"> 
    <thead>
    <tr> <!-- Frame numbers -->
        @for (int i = 0; i < maxFrames; i++)
        {
            <th>Frame @(@i + 1)</th>
        }
    </tr>
    </thead>
    <tbody>
    <tr> <!-- Roll 1 -->
        @for (int i = 0; i < maxFrames; i++)
        {
            var r1 = rolls[0,i];
            <td>@(r1 == 10 ? "X" : r1.HasValue ? r1.ToString() : "-")</td>
        }
    </tr>
    <tr> <!-- Roll 2 -->
        @for (int i = 0; i < maxFrames; i++)
        {
            var r1 = rolls[0,i];
            var r2 = rolls[1,i];
            // spare display: show "/" when first + second roll equals 10 (and not a strike on first ball)
            string cell = "-";
            if (r1 == 10)
            {
                cell = ""; // strike in this frame; second box is empty for frames 1-9
            }
            else if (r2.HasValue)
            {
                var sum = (r1 ?? 0) + (r2 ?? 0);
                cell = sum == 10 ? "/" : r2.GetValueOrDefault().ToString();
            }
            <td>@cell</td>
        }
    </tr>
    <tr> <!-- Frame Total -->
        @for (int i = 0; i < maxFrames; i++)
        {
            var displayTotal = GetDisplayedFrameTotal(i);
            bool frameComplete = i < currentFrame; 
            var text = displayTotal.HasValue ? displayTotal.Value.ToString() : (frameComplete ? "0" : "-");
            var highlight = displayTotal.HasValue && displayTotal.Value == 10;
            <td class="frame-total @(highlight ? "highlight" : null)">@text</td>
        }
    </tr>
    </tbody>
</table>

<div class="d-flex gap-2 mt-3">
    <button class="btn btn-secondary btn-sm" @onclick="ResetGame">New Game</button>
    <button class="btn btn-outline-secondary btn-sm" @onclick="SaveScore">Save Score</button>
</div>

@code {
    private int?[,] rolls = new int?[2, 12];
    public int[] frameTotals = new int[12];
    private int maxFrames = 10;
    private int totalScore = 0;
    public int currentFrame = 0;
    public int currentRoll = 0;
    private int lastRoll = 0; 
    private bool manualInputMode = false;
    private int manualPins = 0;
    
    private Random rnd = new Random();
    
    private void ToggleManualInput()
    {
        manualInputMode = !manualInputMode;
        manualPins = 0;
    }


    private void SaveScore()
    {
        myData.SavedGames.Add(new SavedGame
        {
            PlayerName = string.IsNullOrWhiteSpace(myData.PlayerName) ? "Player" : myData.PlayerName,
            Score = totalScore,
            Timestamp = DateTime.Now
        });
    }

    private void Roll(int? forcedPins = null)
    {
        if (currentFrame >= maxFrames) return; 

        int pinsLeft = 10;
        int firstRoll = rolls[0,currentFrame] ?? 0;

        if (currentRoll == 1)
            pinsLeft -= firstRoll;

        // use manual/auto pins if provided
        lastRoll = forcedPins.HasValue
            ? Math.Clamp(forcedPins.Value, 0, pinsLeft)
            : rnd.Next(0, pinsLeft + 1);

        rolls[currentRoll, currentFrame] = lastRoll;

        // STRIKE
        if (currentRoll == 0 && lastRoll == 10)
        {
            rolls[1, currentFrame] = null; 
            frameTotals[currentFrame] = 10;

            if (currentFrame == 9 && maxFrames == 10)
                maxFrames = 11;
            else if (currentFrame == 10 && maxFrames == 11)
                maxFrames = 12;

            currentFrame++;
            currentRoll = 0;  
        }
        else if (currentRoll == 1)
        {
            frameTotals[currentFrame] = (rolls[0,currentFrame] ?? 0) + (rolls[1,currentFrame] ?? 0);
            currentFrame++;
            currentRoll = 0;
        }
        else
        {
            if (currentFrame == 11 && maxFrames == 12)
            {
                frameTotals[currentFrame] = (rolls[0,currentFrame] ?? 0);
                currentFrame++;
                currentRoll = 0;
            }
            else
            {
                currentRoll = 1;
            }
        }

        // recompute full scoring with bonuses after each delivery
        RecalculateScore();
    }

    private int? GetDisplayedFrameTotal(int i)
    {
        // For frames 1–9: show computed frame score when > 0
        if (i < 9)
        {
            var ft = frameTotals[i];
            return ft > 0 ? ft : (int?)null;
        }

        // For the 10th (index 9): show computed total of the 10th frame including bonuses (already in frameTotals[9])
        if (i == 9)
        {
            var ft10 = frameTotals[9];
            return ft10 > 0 ? ft10 : (int?)null;
        }

        // For any bonus columns (i > 9), show the 10th-frame computed total in the last visible column only
        if (i > 9)
        {
            var ft10 = frameTotals[9];
            return (i == (maxFrames - 1) && ft10 > 0) ? ft10 : (int?)null;
        }

        return null;
    }
    
    private void ResetGame()
    {
        rolls = new int?[2, 12];
        frameTotals = new int[12];
        maxFrames = 10;
        currentFrame = 0;
        currentRoll = 0;
        totalScore = 0;
        lastRoll = 0;
    }

    // Recompute per-frame scores (with bonuses) and total
    private void RecalculateScore()
    {
        var seq = GetAllRollsSequence();
        Array.Clear(frameTotals, 0, frameTotals.Length);

        int rollIdx = 0;
        for (int frame = 0; frame < 10; frame++)
        {
            if (rollIdx >= seq.Count)
            {
                frameTotals[frame] = 0;
                continue;
            }

            // strike
            if (seq[rollIdx] == 10)
            {
                int bonus1 = SafeSeq(seq, rollIdx + 1);
                int bonus2 = SafeSeq(seq, rollIdx + 2);
                frameTotals[frame] = 10 + bonus1 + bonus2;
                rollIdx += 1;
                continue;
            }

            // normal or spare
            int first = seq[rollIdx];
            int second = SafeSeq(seq, rollIdx + 1);
            int framePins = first + second;

            if (framePins == 10)
            {
                int bonus = SafeSeq(seq, rollIdx + 2);
                frameTotals[frame] = 10 + bonus;
            }
            else
            {
                frameTotals[frame] = framePins;
            }

            rollIdx += 2;
        }

        totalScore = frameTotals.Take(10).Sum();
    }

    private List<int> GetAllRollsSequence()
    {
        var list = new List<int>(21);
        for (int f = 0; f < 12; f++)
        {
            var r1 = rolls[0, f];
            var r2 = rolls[1, f];
            if (r1.HasValue) list.Add(r1.Value);
            if (r2.HasValue) list.Add(r2.Value);
        }
        return list;
    }

    private static int SafeSeq(List<int> seq, int idx) => idx < seq.Count ? seq[idx] : 0;
}